/*   Do *not* directly modify this file.  It was    */
/*   generated by the Configuration Tool; any  */
/*   changes risk being overwritten.                */

/* INPUT VC5505_CSL_BIOS_.cdb */

/* MODULE PARAMETERS */
-u _FXN_F_nop
GBL_USERINITFXN = _FXN_F_nop;
-u _FXN_F_nop
GBL_BIOS_BOOTFXN = _FXN_F_nop;

-u MEM_NULL
MEM_SEGZERO = MEM_NULL;
-u MEM_NULL
MEM_MALLOCSEG = MEM_NULL;

-u _CLK_isr
CLK_TIMER0FUNC = _CLK_isr;
-u _gpt1Isr
CLK_TIMER1FUNC = _gpt1Isr;
-u FXN_F_nop
CLK_TIMER2FUNC = FXN_F_nop;
-u _CLK_getshtime
CLK_TIMEFXN = _CLK_getshtime;
-u _CLK_dispRun
CLK_HOOKFXN = _CLK_dispRun;

-u KNL_tick_stub
PRD_THOOKFXN = KNL_tick_stub;

-u DARAM
RTDX_DATAMEMSEG = DARAM;

-u DARAM
HST_DSMBUFSEG = DARAM;

-u GBL_NULL
SWI_EHOOKFXN = GBL_NULL;
-u GBL_NULL
SWI_IHOOKFXN = GBL_NULL;
-u SWI_F_exec
SWI_EXECFXN = SWI_F_exec;
-u SWI_F_run
SWI_RUNFXN = SWI_F_run;

-u MEM_NULL
TSK_STACKSEG = MEM_NULL;
-u _FXN_F_nop
TSK_VCREATEFXN = _FXN_F_nop;
-u _FXN_F_nop
TSK_VDELETEFXN = _FXN_F_nop;
-u _FXN_F_nop
TSK_VEXITFXN = _FXN_F_nop;

-u _IDL_stub
IDL_CALIBRFXN = _IDL_stub;

-u _UTL_doAbort
SYS_ABORTFXN = _UTL_doAbort;
-u _UTL_doError
SYS_ERRORFXN = _UTL_doError;
-u _UTL_halt
SYS_EXITFXN = _UTL_halt;
-u _UTL_doPutc
SYS_PUTCFXN = _UTL_doPutc;

-u _FXN_F_nop
GIO_CREATEFXN = _FXN_F_nop;
-u _FXN_F_nop
GIO_DELETEFXN = _FXN_F_nop;
-u _FXN_F_nop
GIO_PENDFXN = _FXN_F_nop;
-u _FXN_F_nop
GIO_POSTFXN = _FXN_F_nop;

-u _FXN_F_nop
PWRM_PWRM_BOOTHOOKFXN = _FXN_F_nop;

/* OBJECT ALIASES */
_VECT = VECT;
_DARAM = DARAM;
_SARAM = SARAM;
_SARAM31 = SARAM31;
_PRD_clock = PRD_clock;
_poll = poll;
_second = second;
_RTA_fromHost = RTA_fromHost;
_RTA_toHost = RTA_toHost;
_HWI_RESET = HWI_RESET;
_HWI_NMI = HWI_NMI;
_HWI_INT2 = HWI_INT2;
_HWI_INT3 = HWI_INT3;
_HWI_INT4 = HWI_INT4;
_HWI_INT5 = HWI_INT5;
_HWI_INT6 = HWI_INT6;
_HWI_INT7 = HWI_INT7;
_HWI_INT8 = HWI_INT8;
_HWI_INT9 = HWI_INT9;
_HWI_INT10 = HWI_INT10;
_HWI_INT11 = HWI_INT11;
_HWI_INT12 = HWI_INT12;
_HWI_INT13 = HWI_INT13;
_HWI_INT14 = HWI_INT14;
_HWI_INT15 = HWI_INT15;
_HWI_INT16 = HWI_INT16;
_HWI_INT17 = HWI_INT17;
_HWI_INT18 = HWI_INT18;
_HWI_INT19 = HWI_INT19;
_HWI_INT20 = HWI_INT20;
_HWI_INT21 = HWI_INT21;
_HWI_INT22 = HWI_INT22;
_HWI_INT23 = HWI_INT23;
_HWI_BERR = HWI_BERR;
_HWI_DLOG = HWI_DLOG;
_HWI_RTOS = HWI_RTOS;
_HWI_SINT27 = HWI_SINT27;
_HWI_SINT28 = HWI_SINT28;
_HWI_SINT29 = HWI_SINT29;
_HWI_SINT30 = HWI_SINT30;
_HWI_SINT31 = HWI_SINT31;
_PRD_swi = PRD_swi;
_KNL_swi = KNL_swi;
_SWI_Process_USB_Input = SWI_Process_USB_Input;
_SWI_Store_USB_Input = SWI_Store_USB_Input;
_SWI_UserInterface = SWI_UserInterface;
_SWI_Send_USB_Output = SWI_Send_USB_Output;
_TSK_PbAudioAlg = TSK_PbAudioAlg;
_TSK_idle = TSK_idle;
_mainTsk = mainTsk;
_TSK_MUSBMSCTask = TSK_MUSBMSCTask;
_TSK_MUSBMainTask = TSK_MUSBMainTask;
_TSK_CodecConfig = TSK_CodecConfig;
_TSK_RecAudioAlg = TSK_RecAudioAlg;
_IDL_cpuLoad = IDL_cpuLoad;
_LNK_dataPump = LNK_dataPump;
_RTA_dispatcher = RTA_dispatcher;
_LOG_system = LOG_system;
_trace = trace;
_SEM_MUSBMainTaskExited = SEM_MUSBMainTaskExited;
_SEM_AbortTransferDone = SEM_AbortTransferDone;
_SEM_ConnectDeviceDone = SEM_ConnectDeviceDone;
_SEM_ResetDeviceDone = SEM_ResetDeviceDone;
_SEM_MUSBDMARxComplete = SEM_MUSBDMARxComplete;
_SEM_ClearEndpointStalltDone = SEM_ClearEndpointStalltDone;
_SEM_MUSBMSCTaskExited = SEM_MUSBMSCTaskExited;
_SEM_DisconnectDeviceDone = SEM_DisconnectDeviceDone;
_SEM_I2cDevBusy = SEM_I2cDevBusy;
_SEM_RTCAlarmOff = SEM_RTCAlarmOff;
_SEM_PingPongRxLeftComplete = SEM_PingPongRxLeftComplete;
_SEM_PingPongRxRightComplete = SEM_PingPongRxRightComplete;
_SEM_PingPongTxLeftComplete = SEM_PingPongTxLeftComplete;
_SEM_PingPongTxRightComplete = SEM_PingPongTxRightComplete;
_SEM_PingPongTxLeftComplete2 = SEM_PingPongTxLeftComplete2;
_SEM_PingPongTxRightComplete2 = SEM_PingPongTxRightComplete2;
_SEM_PingPongRxLeftComplete2 = SEM_PingPongRxLeftComplete2;
_SEM_PingPongRxRightComplete2 = SEM_PingPongRxRightComplete2;
_SEM_PingPongRxLeftComplete3 = SEM_PingPongRxLeftComplete3;
_SEM_PingPongRxRightComplete3 = SEM_PingPongRxRightComplete3;
_SEM_PingPongTxLeftComplete3 = SEM_PingPongTxLeftComplete3;
_SEM_PingPongTxRightComplete3 = SEM_PingPongTxRightComplete3;
_SEM_PingPongRxLeftComplete4 = SEM_PingPongRxLeftComplete4;
_SEM_PingPongRxRightComplete4 = SEM_PingPongRxRightComplete4;
_SEM_PingPongTxLeftComplete4 = SEM_PingPongTxLeftComplete4;
_SEM_PingPongTxRightComplete4 = SEM_PingPongTxRightComplete4;
_MBX_musb = MBX_musb;
_MBX_msc = MBX_msc;
_MBX_codecConfig = MBX_codecConfig;
_IDL_busyObj = IDL_busyObj;
_mySts1 = mySts1;
_mySts2 = mySts2;
_mySts3 = mySts3;
_mySts4 = mySts4;
_mySts5 = mySts5;

/* MODULE GBL */

SECTIONS {
   .vers block(0x20000) (COPY): {} /* version information */
}

--"diag_suppress=10286" /* new linker needs new BIOS (SDSCM00026767) */

--"diag_suppress=16002"
-priority
-llnkrtdx.a55L
-ldrivers.a55L         /* device drivers support */
-lsioboth.a55L         /* supports both SIO models */
-lbios5505.a55L        /* 5505 and compatible chips */
-lbios.a55L            /* DSP/BIOS support */
-lrtdxx.lib            /* RTDX JTAG support */
-lrts55x.lib           /* C and C++ run-time library support */




/* MODULE MEM */
-stack 0x2000
-sysstack 0x1000

MEMORY {
   PAGE 0:     VECT:     origin = 0x4df00, len = 0x100
   PAGE 0:     DARAM:    origin = 0xc0, len = 0xfe40
   PAGE 0:     SARAM:    origin = 0x10000, len = 0x3df00
   PAGE 0:     SARAM31:  origin = 0x4e000, len = 0x2000
}
/* MODULE CLK */
SECTIONS {
   .clk: block(0x20000), RUN_START(CLK_A_TABBEGb) {
       CLK_F_gethtime = _CLK_getshtime;
       CLK_A_TABBEG = CLK_A_TABBEGb / 2;
        *(.clk) 
   } > DARAM PAGE 0
}
_CLK_PRD = CLK_PRD;
_CLK_COUNTSPMS = CLK_COUNTSPMS;
_CLK_REGS = CLK_REGS;
_CLK_USETIMER = CLK_USETIMER;
_CLK_TIMERNUM = CLK_TIMERNUM;
_CLK_TCR = CLK_TCR;
_CLK_TDDR = CLK_TDDR;

/* MODULE PRD */
SECTIONS {
   .prd: block(0x20000) RUN_START(PRD_A_TABBEGb), RUN_END(PRD_A_TABENDb) {
       PRD_A_TABBEG = PRD_A_TABBEGb / 2;
       PRD_A_TABEND = PRD_A_TABENDb / 2;
   } > DARAM PAGE 0
}
PRD_A_TABLEN = 2;

/* MODULE RTDX */
_RTDX_interrupt_mask = 0x0;

/* MODULE HWI */
HWI_TINT = HWI_INT4;
_HWI_TINT = HWI_TINT;
/* MODULE SWI */
SECTIONS {
   .swi: block(0x20000) RUN_START(SWI_A_TABBEGb), RUN_END(SWI_A_TABENDb) {
       SWI_A_TABBEG = SWI_A_TABBEGb / 2;
       SWI_A_TABEND = SWI_A_TABENDb / 2;
   } > DARAM PAGE 0
}
SWI_A_TABLEN = 6;

/* MODULE TSK */
SECTIONS {
   .tsk: block(0x20000) {
        *(.tsk) 
   } > DARAM PAGE 0
}

/* MODULE IDL */
SECTIONS {
   .idl: block(0x20000), RUN_START(IDL_A_TABBEGb) {
       IDL_A_TABBEG = IDL_A_TABBEGb / 2;
   } > DARAM PAGE 0
   
   .idlcal: block(0x20000), RUN_START(IDL_A_CALBEGb) {
       IDL_A_CALBEG = IDL_A_CALBEGb / 2;
   } > DARAM PAGE 0 
}


LOG_A_TABLEN = 2; _LOG_A_TABLEN = 2;

PIP_A_TABLEN = 2;


SECTIONS {
        .sysdata: block(0x20000) {} > DARAM PAGE 0

        .mem: 	  {} > DARAM PAGE 0

        .sysregs: {} > DARAM PAGE 0

        .trcdata:    {} > DARAM PAGE 0

        .rtdx_text: {}  > DARAM PAGE 0

        .mbx: block(0x20000){} > DARAM PAGE 0

        .sem: block(0x20000){} > DARAM PAGE 0

        .dsm: block(0x20000) {} > DARAM PAGE 0

        .gio: block(0x20000)    {} > DARAM PAGE 0

        .sys: block(0x20000)    {} > DARAM PAGE 0

        .pwrmdb: block(0x20000)   {} > DARAM PAGE 0

        .gblinit: block(0x20000)   {} > DARAM PAGE 0

        .rtdx_data: block(0x20000){}  > DARAM PAGE 0

        .hwi:  {
       /* no HWI stubs are necessary */
       }  > DARAM PAGE 0

        .TSK_RecAudioAlg$stk: block(0x20000){
            *(.TSK_RecAudioAlg$stk)
        } > DARAM PAGE 0

        .TSK_PbAudioAlg$stk: block(0x20000){
            *(.TSK_PbAudioAlg$stk)
        } > DARAM PAGE 0

        /* LOG_system buffer */
        .LOG_system$buf: block(0x20000) align = 0x2000 {} > DARAM PAGE 0

       /* RTA_fromHost buffer */
       .hst1: block(0x20000) align = 0x4 {} > DARAM PAGE 0

       /* RTA_toHost buffer */
       .hst0: block(0x20000) align = 0x4 {} > DARAM PAGE 0

        .args: align = 0x4  fill=0 block(0x20000) {
            *(.args)
            . += 0x80;
        } > DARAM PAGE 0

        .MBX_musb$que: block(0x20000) align = 0x4 {
            MBX_musb$queElems = .;
            . += 192;
        } > DARAM PAGE 0

        .MBX_msc$que: block(0x20000) align = 0x4 {
            MBX_msc$queElems = .;
            . += 192;
        } > DARAM PAGE 0

        .MBX_codecConfig$que: block(0x20000) align = 0x4 {
            MBX_codecConfig$queElems = .;
            . += 64;
        } > DARAM PAGE 0

        .trace: block(0x20000) fill = 0x0 {
           _SYS_PUTCBEG = .;
           . += 0x400;
           _SYS_PUTCEND = . - 1;
        } > DARAM PAGE 0

        .hst: block(0x20000), RUN_START(HST_A_TABBEGb), RUN_END(HST_A_TABENDb) {
           HST_A_TABBEG = HST_A_TABBEGb / 2; _HST_A_TABBEG = HST_A_TABBEGb / 2;
           HST_A_TABEND = HST_A_TABENDb / 2; _HST_A_TABEND = HST_A_TABENDb / 2;
        } > DARAM PAGE 0

        .log: block(0x20000), RUN_START(LOG_A_TABBEGb), RUN_END(LOG_A_TABENDb) {
           LOG_A_TABBEG = LOG_A_TABBEGb / 2; _LOG_A_TABBEG = LOG_A_TABBEGb / 2;
           LOG_A_TABEND = LOG_A_TABENDb / 2; _LOG_A_TABEND = LOG_A_TABENDb / 2;
        } > DARAM PAGE 0

        .pip: block(0x20000), RUN_START(PIP_A_TABBEGb), RUN_END(PIP_A_TABENDb) {
           PIP_A_TABBEG = PIP_A_TABBEGb / 2; _PIP_A_TABBEG = PIP_A_TABBEGb / 2;
           PIP_A_TABEND = PIP_A_TABENDb / 2; _PIP_A_TABEND = PIP_A_TABENDb / 2;
        } > DARAM PAGE 0

        .sts: block(0x20000), RUN_START(STS_A_TABBEGb), RUN_END(STS_A_TABENDb) {
           STS_A_TABBEG = STS_A_TABBEGb / 2; _STS_A_TABBEG = STS_A_TABBEGb / 2;
           STS_A_TABEND = STS_A_TABENDb / 2; _STS_A_TABEND = STS_A_TABENDb / 2;
        } > DARAM PAGE 0

        GROUP { 
                .sysstack :  align = 0x4 {
                GBL_sysstackbeg = .;
                 *(.sysstack)
                 GBL_sysstackend = GBL_sysstackbeg + 0x1000 -1 ;
                _HWI_SYSSTKTOP = GBL_sysstackbeg; 
               _HWI_SYSSTKBOTTOM = (GBL_sysstackend+1);
               } 
                .stack: align = 0x4 {
                GBL_stackbeg = .;
                 *(.stack)
                GBL_stackend = (GBL_stackbeg + 0x2000 - 1) ;
                _HWI_STKBOTTOM = (GBL_stackend+1);
                _HWI_STKTOP = (GBL_stackbeg);
                }
        } BLOCK(0x20000), run  > DARAM PAGE 0

        .hwi_disp_sec:  block(0x20000) {} > SARAM PAGE 0

        .bios:    {} > SARAM PAGE 0

        .sysinit:    {} > SARAM PAGE 0

        .TSK_idle$stk: block(0x20000){
            *(.TSK_idle$stk)
        } > SARAM PAGE 0

        .mainTsk$stk: block(0x20000){
            *(.mainTsk$stk)
        } > SARAM PAGE 0

        .TSK_MUSBMSCTask$stk: block(0x20000){
            *(.TSK_MUSBMSCTask$stk)
        } > SARAM PAGE 0

        .TSK_MUSBMainTask$stk: block(0x20000){
            *(.TSK_MUSBMainTask$stk)
        } > SARAM PAGE 0

        .TSK_CodecConfig$stk: block(0x20000){
            *(.TSK_CodecConfig$stk)
        } > SARAM PAGE 0

        /* trace buffer */
        .trace$buf: block(0x20000) align = 0x2000 {} > SARAM31 PAGE 0

        .hwi_vec:  align = 0x100 {
            *(.hwi_vec)
        } RUN_START(HWI_A_VECS),  > VECT PAGE 0

}

